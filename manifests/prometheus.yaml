apiVersion: v1
kind: Namespace
metadata:
  name: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prometheus
spec:
  ports:
  - name: api
    protocol: TCP
    port: 9090
    targetPort: 9090
  selector:
    app: prometheus
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: prometheus
spec:
  rules:
  - http:
      paths:
      - pathType: ImplementationSpecific
        backend:
          service:
            name: prometheus
            port:
              number: 9090
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: prometheus
  namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: prometheus
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  serviceName: prometheus
  template:
    metadata:
      namespace: prometheus
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.7.1
        command:
        - /bin/prometheus
        args:
        - --query.timeout=4m
        - --query.max-samples=5000000000
        - --storage.tsdb.path=/var/lib/prometheus/data/data
        - --config.file=/etc/prometheus/prometheus.yaml
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --web.enable-admin-api
        - --web.external-url=http://anything
        - --web.route-prefix=/
        ports:
        - containerPort: 9090
          name: api
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-pvc
          mountPath: /var/lib/prometheus/data
        resources: {}
      securityContext:
        fsGroup: 2000
      serviceAccountName: prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
          defaultMode: 420
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: prometheus-pvc
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 80Gi
      storageClassName: kops-ssd-1-17
      volumeMode: Filesystem
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: prometheus
data:
  prometheus.yaml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 2m
    rule_files:
      - '/etc/prometheus/recording_rules.yaml'
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'gm-metrics-kubernetes'
        metrics_path: /prometheus
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - greymatter
                - team-b
        relabel_configs:
          # Drop all named ports that are not proxy
          - source_labels: ['__meta_kubernetes_pod_container_port_name']
            regex: 'proxy'
            action: 'keep'
          # Relabel Prometheus job label to the name of the service
          - source_labels: ['__meta_kubernetes_pod_label_greymatter_io_cluster']
            regex: '(.*)'
            target_label: job
            replacement: '${1}'
      - job_name: 'envoy-metrics-kubernetes'
        metrics_path: /stats/prometheus
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - greymatter
                - team-b
        relabel_configs:
          # Drop all named ports that are not proxy
          - source_labels: ['__meta_kubernetes_pod_container_port_name']
            regex: 'proxy'
            action: 'keep'
          # Relabel Prometheus job label to the name of the service
          - source_labels: ['__meta_kubernetes_pod_label_greymatter_io_cluster']
            regex: '(.*)'
            target_label: job
            replacement: '${1}'
          - source_labels: ['__address__']
            regex: '(.*):(.*)'
            target_label: '__address__'
            replacement: '${1}:8001'
  recording_rules.yaml: |-
      groups:
        # queries for overall services
        - name: overviewQueries
          rules:
            - record: overviewQueries:avgUpPercent:avg
              expr: avg by (job) (up)
            # avgResponseTimeByRoute
            - record: overviewQueries:avgResponseTimeByRoute_1h:avg
              expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[1h]) / rate(http_request_duration_seconds_count{key!="all"}[1h]) * 1000 > 0) by (job, key)
            - record: overviewQueries:avgResponseTimeByRoute_4h:avg
              expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[4h]) / rate(http_request_duration_seconds_count{key!="all"}[4h]) * 1000 > 0) by (job, key)
            - record: overviewQueries:avgResponseTimeByRoute_12h:avg
              expr: avg(rate(http_request_duration_seconds_sum{key!="all"}[12h]) / rate(http_request_duration_seconds_count{key!="all"}[12h]) * 1000 > 0) by (job, key)
            # numberOfRequestsByRoute
            - record: overviewQueries:numberOfRequestsByRoute_1h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[1h])) >= 1) by (job, key)
            - record: overviewQueries:numberOfRequestsByRoute_4h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[4h])) >= 1) by (job, key)
            - record: overviewQueries:numberOfRequestsByRoute_12h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[12h])) >= 1) by (job, key)
            # latencyByRoute
            - record: overviewQueries:latencyByRoute_1h:sum
              expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[1h])) > 0
            - record: overviewQueries:latencyByRoute_4h:sum
              expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[4h])) > 0
            - record: overviewQueries:latencyByRoute_12h:sum
              expr: sum without(instance, status)(rate(http_request_duration_seconds_count{key!="all"}[12h])) > 0
            # error percent
            - record: overviewQueries:errorPercent_1h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1h]) )) by (job) * 100
            - record: overviewQueries:errorPercent_4h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[4h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[4h]) )) by (job) * 100
            - record: overviewQueries:errorPercent_12h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[12h]) )) by (job) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[12h]) )) by (job) * 100
        # queries for each route
        - name: queriesByRoute
          rules:
            # error percent
            - record: queriesByRoute:errorPercent_1h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1h]) )) by (job, key, method) * 100
            - record: queriesByRoute:errorPercent_4h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[4h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[4h]) )) by (job, key, method) * 100
            - record: queriesByRoute:errorPercent_12h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[12h]) )) by (job, key, method) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[12h]) )) by (job, key, method) * 100
            # p95Latency
            - record: queriesByRoute:p95Latency_1h:sum
              expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[1h]))) * 1000, 0.1)
            - record: queriesByRoute:p95Latency_4h:sum
              expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[4h]))) * 1000, 0.1)
            - record: queriesByRoute:p95Latency_12h:sum
              expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[12h]))) * 1000, 0.1)
            # p50 latency
            - record: queriesByRoute:p50Latency_1h:sum
              expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[1h]))) * 1000, 0.1)
            - record: queriesByRoute:p50Latency_4h:sum
              expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[4h]))) * 1000, 0.1)
            - record: queriesByRoute:p50Latency_12h:sum
              expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[12h]))) * 1000, 0.1)
            # request count for route
            - record: queriesByRoute:requestCount_1h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[1h])) >= 1) by (job, key, method)
            - record: queriesByRoute:requestCount_4h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[4h])) >= 1) by (job, key, method)
            - record: queriesByRoute:requestCount_12h:sum
              expr: sum(floor(increase(http_request_duration_seconds_count[12h])) >= 1) by (job, key, method)
        # range queries
        - name: rangeQueries
          rules:
            # pXXLatency range queries
            - record: rangeQueries:p50Latency:sum
              expr: round(histogram_quantile(0.50,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            - record: rangeQueries:p90Latency:sum
              expr: round(histogram_quantile(0.90,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            - record: rangeQueries:p95Latency:sum
              expr: round(histogram_quantile(0.95,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            - record: rangeQueries:p99Latency:sum
              expr: round(histogram_quantile(0.99,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            - record: rangeQueries:p999Latency:sum
              expr: round(histogram_quantile(0.999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            - record: rangeQueries:p9999Latency:sum
              expr: round(histogram_quantile(0.9999,avg without(instance, status)(rate(http_request_duration_seconds_bucket[10m]))) * 1000, 0.1)
            # error percent by (job, key)
            - record: rangeQueries:errorPercent:sum
              expr: sum(floor(increase(http_request_duration_seconds_count{status!~"2..|3..", key!="all"}[1m]) )) by (job, key) / sum(floor(increase(http_request_duration_seconds_count{key!="all"}[1m]) )) by (job, key) * 100
            # respones time per bucket
            - record: rangeQueries:responseTimeP50:sum
              expr: round(histogram_quantile(0.50,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
            - record: rangeQueries:responseTimeP90:sum
              expr: round(histogram_quantile(0.90,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
            - record: rangeQueries:responseTimeP95:sum
              expr: round(histogram_quantile(0.95,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
            - record: rangeQueries:responseTimeP99:sum
              expr: round(histogram_quantile(0.99,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
            - record: rangeQueries:responseTimeP999:sum
              expr: round(histogram_quantile(0.999,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
            - record: rangeQueries:responseTimeP9999:sum
              expr: round(histogram_quantile(0.9999,avg without(instance, status, key, method)(rate(http_request_duration_seconds_bucket{key!="all"}[10m]))) * 1000, 0.1)
